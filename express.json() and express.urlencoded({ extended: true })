
### 1. **`app.use(express.json());`**

This line tells Express to use the **JSON middleware** to automatically parse incoming requests with a `Content-Type` of `application/json`. Here's what it does:

- **`express.json()`**: This is a built-in middleware function in Express that parses incoming **JSON** payloads in the body of the request. 
  - When a client sends a POST or PUT request with JSON data, this middleware will parse that data and make it available in `req.body`.
  
- **`app.use()`**: This method adds the middleware to the Express request processing pipeline. It tells Express to use the `express.json()` middleware for every incoming request.

#### Example:
If a client sends a POST request with JSON data:

```json
{
  "name": "John",
  "age": 30
}
```

Express will automatically parse this JSON into a JavaScript object and make it available in the `req.body` of your route handler:

```javascript
app.post('/some-route', (req, res) => {
  console.log(req.body); // { name: 'John', age: 30 }
  res.send('Data received');
});
```

### 2. **`app.use(express.urlencoded({ extended: true }));`**

This line is used to handle URL-encoded data, which is typically sent by HTML forms with `application/x-www-form-urlencoded` as the `Content-Type`.

- **`express.urlencoded()`**: This middleware is responsible for parsing URL-encoded data (like form submissions) and making it available in `req.body`.

- **`{ extended: true }`**: This option specifies how to handle complex objects (i.e., objects with nested data) that might be encoded in the URL-encoded format. 
  - **`extended: true`** allows you to parse data into a more complex JavaScript object (using the `qs` library).
  - If set to **`false`**, it will use the `querystring` library and only support simpler, flat data structures.

#### Example:
If a client sends a POST request with URL-encoded data (e.g., from an HTML form):

```
name=John&age=30
```

Express will parse this URL-encoded string into a JavaScript object and make it available in `req.body`:

```javascript
app.post('/form', (req, res) => {
  console.log(req.body); // { name: 'John', age: '30' }
  res.send('Form data received');
});
```

### Why are these used?

- **`express.json()`**: Used for handling data sent in the body of the request in JSON format (commonly used in APIs or modern web applications).
  
- **`express.urlencoded({ extended: true })`**: Used for handling data sent via form submissions or traditional web forms, where data is sent in URL-encoded format.

### When to use each:

- **`express.json()`** is used when the request body is in **JSON format**, like when you're working with APIs or sending data from JavaScript (e.g., when making AJAX requests from the frontend).

- **`express.urlencoded({ extended: true })`** is used when the request body is **URL-encoded**, which is common in **form submissions** from web pages.

### Summary:
These two lines are middleware functions that:
1. **`express.json()`**: Parse incoming requests with JSON payloads and makes the data available in `req.body`.
2. **`express.urlencoded({ extended: true })`**: Parse URL-encoded data (typically from forms) and makes it available in `req.body`, allowing for complex objects when `extended: true` is used.
